#!/usr/bin/env bash

# ==============================================
# Git Pre-Commit Hook for Clang-Format
# Version: 1.2
# Features:
# - Automatic C++ file formatting
# - Configurable file extensions
# - Exclusion list support
# - Dry run mode
# - Cross-platform compatibility
# - English-only output
# ==============================================

echo "‚öôÔ∏è Starting pre-commit clang-format check..."

# ========================
# CONFIGURATION SECTION
# ========================

# Supported file extensions
FILE_EXTENSIONS=("*.cpp" "*.h" "*.hpp" "*.cxx" "*.cc" "*.c++" "*.h++")

# Path to clang-format executable
CLANG_FORMAT="clang-format"

# Block commit if formatting issues found?
BLOCK_ON_ERROR=true

# Dry run mode (only check, don't modify files)
DRY_RUN=false

# Exclusion list (supports wildcards)
EXCLUDE_PATTERNS=(
    "third_party/**"
    "build/**"
    "external/**"
    "generated/**"
    "vendor/**"
    "*/legacy/*.cpp"
)

# ========================
# FUNCTION DEFINITIONS
# ========================

# Check if file matches exclusion pattern
is_excluded() {
    local file="$1"
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        # Convert pattern to regex
        local regex=${pattern//\*\*/.*}
        regex=${regex//\*/[^/]*}
        regex=${regex//\//\\/}
        
        if [[ "$file" =~ $regex ]]; then
            return 0  # File is excluded
        fi
    done
    return 1  # File is not excluded
}

# ========================
# MAIN SCRIPT LOGIC
# ========================

# Verify clang-format installation
if ! command -v "$CLANG_FORMAT" &> /dev/null; then
    echo "‚ùå ERROR: clang-format not found!"
    echo "  Install from: https://clang.llvm.org/docs/ClangFormat.html"
    exit 1
fi

# Check for configuration file
if [ ! -f .clang-format ]; then
    echo "‚ö†Ô∏è WARNING: No .clang-format configuration file found"
    echo "  Generating default configuration..."
    "$CLANG_FORMAT" -style=llvm -dump-config > .clang-format
fi

# Collect staged files
staged_files=()
for ext in "${FILE_EXTENSIONS[@]}"; do
    while IFS= read -r -d $'\0' file; do
        if [[ -e "$file" ]] && ! is_excluded "$file"; then
            staged_files+=("$file")
        fi
    done < <(git diff --cached --name-only -z --diff-filter=d -- "$ext")
done

# Exit if no files to process
if [ ${#staged_files[@]} -eq 0 ]; then
    echo "‚úÖ No C++ files to format"
    exit 0
fi

echo "üîç Found ${#staged_files[@]} files to check:"
printf '  - %s\n' "${staged_files[@]}"

# Create temporary directory
tmpdir=$(mktemp -d)
trap 'rm -rf "$tmpdir"' EXIT

# Process files
has_errors=false
needs_formatting=()

for file in "${staged_files[@]}"; do
    # Backup original content
    mkdir -p "$tmpdir/$(dirname "$file")"
    cp "$file" "$tmpdir/$file"
    
    # Format file
    if "$CLANG_FORMAT" -style=file -i "$file"; then
        # Check if formatting changed the file
        if ! diff -q "$tmpdir/$file" "$file" >/dev/null; then
            needs_formatting+=("$file")
            
            if $DRY_RUN; then
                echo "  ‚ö†Ô∏è $file: Requires formatting"
                # Restore original
                cp "$tmpdir/$file" "$file"
            else
                echo "  ‚ú® $file: Formatted"
                # Stage the changes
                git add "$file"
            fi
        fi
    else
        echo "  ‚ùå $file: Formatting failed"
        has_errors=true
    fi
done

# Handle results
if [ ${#needs_formatting[@]} -gt 0 ]; then
    if $DRY_RUN; then
        echo "‚ö†Ô∏è WARNING: ${#needs_formatting[@]} files require formatting:"
        printf '  - %s\n' "${needs_formatting[@]}"
        has_errors=true
    else
        echo "‚úÖ Successfully formatted ${#needs_formatting[@]} files"
    fi
fi

# Handle errors
if $has_errors; then
    if $BLOCK_ON_ERROR; then
        echo ""
        echo "=============================================="
        echo "‚ùå COMMIT BLOCKED: Formatting issues detected"
        echo "  To fix:"
        echo "  1. Run manually: clang-format -i ${staged_files[@]}"
        echo "  2. Review changes: git diff"
        echo "  3. Add fixes: git add ..."
        echo "  4. Commit again"
        echo "=============================================="
        exit 1
    else
        echo "‚ö†Ô∏è WARNING: Formatting issues detected (commit not blocked)"
    fi
fi

echo "‚úÖ Pre-commit check completed successfully"
exit 0
